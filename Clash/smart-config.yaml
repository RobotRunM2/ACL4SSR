# 必读！！！
# 注意规则在满足自己需求情况下，尽量做到精简，不要过度复杂，以免影响性能。
# 跑裸核用户请自行去掉下方控制面板模块的注释。
# 机场订阅
proxy-providers:
  Airport1:
    url: "https://sub.xiaocao.im/wwg01269/download/collection/%E7%BB%84%E5%90%88?target=ClashMeta"
    type: http
    interval: 86400
    health-check:
      enable: true
      url: https://www.gstatic.com/generate_204
      interval: 300
    proxy: DIRECT

# 节点信息
# proxies:
#   - { name: 直连, type: direct }

# 全局配置
port: 7890
socks-port: 7891
redir-port: 7892
mixed-port: 7893
tproxy-port: 7894
allow-lan: true
bind-address: "*"
ipv6: false
unified-delay: true
tcp-concurrent: true
log-level: warning
find-process-mode: "off"
# interface-name: en0
global-client-fingerprint: chrome
keep-alive-idle: 600
keep-alive-interval: 15
disable-keep-alive: false

# smart 相关
# enable model auto update, the default is false
lgbm-auto-update: true
# model auto update interval, the default is 72 (hours)
lgbm-update-interval: 72
# model update url
lgbm-url: "https://github.com/vernesong/mihomo/releases/download/LightGBM-Model/Model.bin"

# profile:
#   #smart-collector-size: data collection file size, the default is 100 (MB)
#   smart-collector-size: 100

profile:
  #smart-collector-size: data collection file size, the default is 100 (MB)
  smart-collector-size: 100
  store-selected: true
  store-fake-ip: true

# 控制面板，external-ui 路径如果出现报错，根据你使用的插件进行调整，比如openclash改为： /etc/openclash/run/ui  ，裸核跑改为/etc/mihomo/run/ui
# 因容易造成新手面板启动问题，我注释掉了，需要的自行开启
#external-controller: 0.0.0.0:9090
#secret: ""
#external-ui: "/etc/nikki/run/ui"
#external-ui-name: zashboard
#external-ui-url: "https://github.com/Zephyruso/zashboard/archive/refs/heads/gh-pages.zip"

# 嗅探
sniffer:
  enable: true
  sniff:
    HTTP:
      ports: [80, 8080-8880]
      override-destination: true
    TLS:
      ports: [443, 8443]
    QUIC:
      ports: [443, 8443]
  force-domain:
    - "+.v2ex.com"
  skip-domain:
    - "+.baidu.com"

# 入站
tun:
  enable: true
  # system/gvisor/mixed
  stack: mixed
  dns-hijack: ["any:53", "tcp://any:53"]
  auto-route: true
  auto-redirect: true
  auto-detect-interface: true

# DNS模块
dns:
  enable: true
  listen: 0.0.0.0:1053
  ipv6: false
  respect-rules: true
  enhanced-mode: fake-ip
  fake-ip-range: 28.0.0.1/8
  fake-ip-filter-mode: blacklist
  fake-ip-filter:
    - "rule-set:private_domain,cn_domain"
    - "+.msftconnecttest.com"
    - "+.msftncsi.com"
    - "time.*.com"
    - "+.market.xiaomi.com"
  default-nameserver:
    - 223.5.5.5
  proxy-server-nameserver:
    - https://223.5.5.5/dns-query
  # namesever尽量用运营商提供的DNS
  nameserver:
    - 223.5.5.5
    - 119.29.29.29

######### 锚点 start #######
# 策略组相关
smart:
  &smart {
    type: smart,
    uselightgbm: true,
    collectdata: true,
    strategy: sticky-sessions,
  }
#这里是订阅更新和延迟测试相关的
proxies:
  &proxies {
    proxies:
      [
        🚀 手动切换,
        🇭🇰 香港流量,
        🇯🇵 日本流量,
        🇺🇲 美国流量,
        🇨🇳 台湾流量,
        🇸🇬 狮城流量,
        🇰🇷 韩国流量,
        🇪🇺 欧洲流量,
        🌏 亚洲流量,
        🇭🇰 香港带宽,
        🇯🇵 日本带宽,
        🇺🇲 美国带宽,
        🇨🇳 台湾带宽,
        🇸🇬 狮城带宽,
        🇰🇷 韩国带宽,
        🇪🇺 欧洲带宽,
        🌏 亚洲带宽,
        🎲 其他带宽,
        🌐 全部节点,
        DIRECT,
      ],
  }

######### 锚点 end #######

# 出站策略，根据自己情况调整每个策略里分组排序，增删都可以，比如把美国自动放到第一个，比如删除香港故转，注意别漏掉表情逗号等。
# 如果相应分组没有筛选到对应的国家，请根据自己节点名字调整筛选关键字。
# 没有再使用锚点，是考虑很多新手修改难度，这样新手修改某个分组更容易些。
proxy-groups:
  - { name: 🚀 手动切换, type: select, include-all: true }
  - { name: 🌐 国际DNS, type: select, <<: *proxies }
  - { name: 📲 Telegram, type: select, <<: *proxies }
  - { name: 📹 YouTube, type: select, <<: *proxies }
  - { name: 🍀 Google, type: select, <<: *proxies }
  - { name: 🤖 AI, type: select, <<: *proxies }
  - { name: 👨🏿‍💻 GitHub, type: select, <<: *proxies }
  - { name: Ⓜ️ OneDrive, type: select, <<: *proxies }
  - { name: Ⓜ️ Microsoft, type: select, <<: *proxies }
  - { name: 🎵 TikTok, type: select, <<: *proxies }
  - { name: 🌍 国外媒体, type: select, <<: *proxies }
  - { name: 🎥 NETFLIX, type: select, <<: *proxies }
  - { name: ✈️ Speedtest, type: select, <<: *proxies }
  - { name: 💶 PayPal, type: select, <<: *proxies }
  - { name: 🍎 Apple, type: select, <<: *proxies }
  - { name: 🎮 游戏平台, type: select, <<: *proxies }

  - { name: 🐟 漏网之鱼, type: select, <<: *proxies }
  - { name: 🎯 全球直连, type: select, proxies: [DIRECT, 🚀 手动切换] }
  - { name: 🛑 广告拦截, type: select, proxies: [DIRECT, REJECT] }
  - { name: 🍃 应用净化, type: select, proxies: [DIRECT, REJECT] }

  - {
      name: 🇭🇰 香港流量,
      <<: *smart,
      include-all: true,
      filter: "(?=.*(港|HK|hk|Hong Kong|HongKong|hongkong))(?=.*(\\dx|x\\d))",
    }
  - {
      name: 🇯🇵 日本流量,
      <<: *smart,
      include-all: true,
      filter: "(?=.*(日本|川日|东京|大阪|泉日|埼玉|沪日|深日|JP|Japan))(?=.*(\\dx|x\\d))",
    }
  - {
      name: 🇺🇲 美国流量,
      <<: *smart,
      include-all: true,
      filter: "(?=.*(美|波特兰|达拉斯|俄勒冈|凤凰城|费利蒙|硅谷|拉斯维加斯|洛杉矶|圣何塞|圣克拉拉|西雅图|芝加哥|US|United States))(?=.*(\\dx|x\\d))",
    }
  - {
      name: 🇨🇳 台湾流量,
      <<: *smart,
      include-all: true,
      filter: "(?=.*(台|新北|彰化|TW|Taiwan))(?=.*(\\dx|x\\d))",
    }
  - {
      name: 🇸🇬 狮城流量,
      <<: *smart,
      include-all: true,
      filter: "(?=.*(新加坡|坡|狮城|SG|Singapore))(?=.*(\\dx|x\\d))",
    }
  - {
      name: 🇰🇷 韩国流量,
      <<: *smart,
      include-all: true,
      filter: "(?=.*(KR|Korea|KOR|首尔|韩|韓))(?=.*(\\dx|x\\d))",
    }
  - {
      name: 🇪🇺 欧洲流量,
      <<: *smart,
      include-all: true,
      filter: "(?=.*(波兰|荷兰|英国|法国|德国|🇪🇺|PL))(?=.*(\\dx|x\\d))",
    }
  - {
      name: 🌏 亚洲流量,
      <<: *smart,
      include-all: true,
      filter: "(?=.*(伊朗|阿联酋|印度|柬埔寨|泰国))(?=.*(\\dx|x\\d))",
    }

  - {
      name: 🇭🇰 香港带宽,
      <<: *smart,
      include-all: true,
      filter: "(?=.*(港|HK|hk|Hong Kong|HongKong|hongkong))(?!.*(\\dx|x\\d))",
    }
  - {
      name: 🇯🇵 日本带宽,
      <<: *smart,
      include-all: true,
      filter: "(?=.*(日本|川日|东京|大阪|泉日|埼玉|沪日|深日|JP|Japan))(?!.*(\\dx|x\\d))",
    }
  - {
      name: 🇺🇲 美国带宽,
      <<: *smart,
      include-all: true,
      filter: "(?=.*(美|波特兰|达拉斯|俄勒冈|凤凰城|费利蒙|硅谷|拉斯维加斯|洛杉矶|圣何塞|圣克拉拉|西雅图|芝加哥|US|United States))(?!.*(\\dx|x\\d))",
    }
  - {
      name: 🇨🇳 台湾带宽,
      <<: *smart,
      include-all: true,
      filter: "(?=.*(台|新北|彰化|TW|Taiwan))(?!.*(\\dx|x\\d))",
    }
  - {
      name: 🇸🇬 狮城带宽,
      <<: *smart,
      include-all: true,
      filter: "(?=.*(新加坡|坡|狮城|SG|Singapore))(?!.*(\\dx|x\\d))",
    }
  - {
      name: 🇰🇷 韩国带宽,
      <<: *smart,
      include-all: true,
      filter: "(?=.*(KR|Korea|KOR|首尔|韩|韓))(?!.*(\\dx|x\\d))",
    }
  - {
      name: 🇪🇺 欧洲带宽,
      <<: *smart,
      include-all: true,
      filter: "(?=.*(波兰|荷兰|英国|法国|德国|🇪🇺|PL))(?!.*(\\dx|x\\d))",
    }
  - {
      name: 🌏 亚洲带宽,
      <<: *smart,
      include-all: true,
      filter: "(?=.*(伊朗|阿联酋|印度|柬埔寨|泰国))(?!.*(\\dx|x\\d))",
    }
  - { name: 🎲 其他带宽, <<: *smart, include-all: true, filter: "(?=.*(其他))" }
  - { name: 🌐 全部节点, <<: *smart, include-all: true }

# 规则匹配
# 此规则部分没有做防泄露处理，因为弊严重大于利！
rules:
  - RULE-SET,private_domain,DIRECT
  - RULE-SET,InternationalDNS,🌐 国际DNS,
  - RULE-SET,apple_domain,🍎 Apple
  - RULE-SET,proxylite,🚀 手动切换
  - RULE-SET,ai,🤖 AI
  - RULE-SET,github_domain,👨🏿‍💻 GitHub
  - RULE-SET,youtube_domain,📹 YouTube
  - RULE-SET,google_domain,🍀 Google
  - RULE-SET,onedrive_domain,Ⓜ️ OneDrive
  - RULE-SET,microsoft_domain,Ⓜ️ Microsoft
  - RULE-SET,tiktok_domain,🎵 TikTok
  - RULE-SET,speedtest_domain,✈️ Speedtest
  - RULE-SET,telegram_domain,📲 Telegram
  - RULE-SET,Nintendo,🎮 游戏平台
  - RULE-SET,Steam,🎮 游戏平台
  - RULE-SET,Epic,🎮 游戏平台
  - RULE-SET,netflix_domain,🎥 NETFLIX
  - RULE-SET,ProxyMedia,🌍 国外媒体
  - RULE-SET,paypal_domain,💶 PayPal
  - RULE-SET,gfw_domain,🚀 手动切换
  - RULE-SET,geolocation-!cn,🚀 手动切换
  - RULE-SET,cn_domain,🎯 全球直连
  - RULE-SET,google_ip,🍀 Google,no-resolve
  - RULE-SET,netflix_ip,🎥 NETFLIX,no-resolve
  - RULE-SET,telegram_ip,📲 Telegram,no-resolve
  - RULE-SET,cn_ip,🎯 全球直连
  - MATCH,🐟 漏网之鱼

# 规则集
rule-anchor:
  ip: &ip { type: http, interval: 86400, behavior: ipcidr, format: mrs }
  domain: &domain { type: http, interval: 86400, behavior: domain, format: mrs }
  class:
    &class { type: http, interval: 86400, behavior: classical, format: text }
rule-providers:
  Nintendo:
    {
      <<: *class,
      url: "https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/Ruleset/Nintendo.list",
    }
  Steam:
    {
      <<: *class,
      url: "https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/Ruleset/Steam.list",
    }
  Epic:
    {
      <<: *class,
      url: "https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/Ruleset/Epic.list",
    }
  ProxyMedia:
    {
      <<: *class,
      url: "https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/ProxyMedia.list",
    }
  private_domain:
    {
      <<: *domain,
      url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/private.mrs",
    }
  InternationalDNS:
    {
      <<: *class,
      url: "https://raw.githubusercontent.com/RobotRunM2/ACL4SSR/refs/heads/master/Clash/Ruleset/InternationalDNS.list",
    }
  proxylite:
    {
      <<: *class,
      url: "https://raw.githubusercontent.com/qichiyuhub/rule/refs/heads/main/proxy.list",
    }
  ai:
    {
      <<: *domain,
      url: "https://github.com/MetaCubeX/meta-rules-dat/raw/refs/heads/meta/geo/geosite/category-ai-!cn.mrs",
    }
  youtube_domain:
    {
      <<: *domain,
      url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/youtube.mrs",
    }
  google_domain:
    {
      <<: *domain,
      url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/google.mrs",
    }
  github_domain:
    {
      <<: *domain,
      url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/github.mrs",
    }
  telegram_domain:
    {
      <<: *domain,
      url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/telegram.mrs",
    }
  netflix_domain:
    {
      <<: *domain,
      url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/netflix.mrs",
    }
  paypal_domain:
    {
      <<: *domain,
      url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/paypal.mrs",
    }
  onedrive_domain:
    {
      <<: *domain,
      url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/onedrive.mrs",
    }
  microsoft_domain:
    {
      <<: *domain,
      url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/microsoft.mrs",
    }
  apple_domain:
    {
      <<: *domain,
      url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/apple-cn.mrs",
    }
  speedtest_domain:
    {
      <<: *domain,
      url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/ookla-speedtest.mrs",
    }
  tiktok_domain:
    {
      <<: *domain,
      url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/tiktok.mrs",
    }
  gfw_domain:
    {
      <<: *domain,
      url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/gfw.mrs",
    }
  geolocation-!cn:
    {
      <<: *domain,
      url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/geolocation-!cn.mrs",
    }
  cn_domain:
    {
      <<: *domain,
      url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/cn.mrs",
    }

  cn_ip:
    {
      <<: *ip,
      url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/cn.mrs",
    }
  google_ip:
    {
      <<: *ip,
      url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/google.mrs",
    }
  telegram_ip:
    {
      <<: *ip,
      url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/telegram.mrs",
    }
  netflix_ip:
    {
      <<: *ip,
      url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/netflix.mrs",
    }
